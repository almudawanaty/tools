
(function() {
  // √”„«¡ «·œÊ„Ì‰«  «·„”„ÊÕ »ÌÂ« (÷Ì› «·œÊ„Ì‰ » «⁄ «·⁄„Ì· Â‰«)
  const allowedDomains = ["https://tsttawi.blogspot.com", "yourcustomer.blogspot.com"];

  // ÃÛÌ» «·œÊ„Ì‰ «·Õ«·Ì »œÊ‰ www
  const currentDomain = window.location.hostname.replace(/^www\./, "");

  // ·Ê «·œÊ„Ì‰ „‘ „‰ ÷„‰ «·„”„ÊÕ »ÌÂ« ? «⁄„· ÕŸ—
  if (!allowedDomains.includes(currentDomain)) {
    // «„”Õ ﬂ· „Õ ÊÏ «·’›Õ…
    document.documentElement.innerHTML = "";
    // «⁄—÷ —”«·… ›Ì «·ﬂÊ‰”Ê·
    console.warn(" „ ÕŸ— «·√œ«… ⁄·Ï Â–« «·‰ÿ«ﬁ: " + currentDomain);
    // √Ê √⁄œ  ÊÃÌÂ «·“«∆—
    // window.location.href = "https://example.com/blocked";
  }
})();
<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>√œ«… ÷€ÿ Ê Õ·Ì· Ê Õ”Ì‰ CSS «·„ ﬂ«„·…</title>
  <link href="https://fonts.googleapis.com/css2?family=Cairo:wght@500;700&display=swap" rel="stylesheet" />
  <style>
    * { box-sizing: border-box; }
    body {
      font-family: 'Cairo', sans-serif;
      background: #f3f0ff;
      margin: 0; padding: 0;
      color: #333;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
    }
    h1 {
      color: #7b1fa2;
      margin-bottom: 30px;
      font-weight:700;
      text-align:center;
    }
    .container {
      max-width: 960px;
      width: 100%;
      background: #ede7f6;
      border-radius: 15px;
      box-shadow: 0 8px 20px rgba(123,31,162,0.2);
      padding: 25px;
      margin-bottom: 30px;
    }
    textarea {
      width: 100%;
      height: 180px;
      padding: 15px;
      font-size: 16px;
      border: 2px solid #7b1fa2;
      border-radius: 10px;
      background: #fff;
      resize: vertical;
      direction: rtl;
      text-align: right;
      font-family: 'Cairo', sans-serif;
    }
    label {
      display: flex;
      align-items: center;
      gap: 8px;
      cursor: pointer;
      font-size: 15px;
      margin-bottom: 8px;
    }
    input[type="checkbox"] {
      width: 18px;
      height: 18px;
      cursor: pointer;
    }
    button {
      background: linear-gradient(145deg, #7e57c2, #673ab7);
      color: white;
      font-weight: bold;
      border: none;
      border-radius: 8px;
      padding: 12px 20px;
      font-size: 16px;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.3s ease;
      margin: 5px 5px 5px 0;
    }
    button:hover {
      background: linear-gradient(145deg, #5e35b1, #4527a0);
      transform: scale(1.05);
    }
    .flex-row {
      display: flex;
      flex-wrap: wrap;
      gap: 10px;
      justify-content: flex-start;
      margin-bottom: 15px;
    }
    .section-title {
      background: #f3e5f5;
      border: 1px solid #ce93d8;
      border-radius: 10px;
      padding: 12px;
      margin-bottom: 15px;
      text-align: center;
      font-weight: 600;
      color: #6a1b9a;
    }
    .tabs {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
      justify-content: center;
      flex-wrap: wrap;
    }
    .tab {
      cursor: pointer;
      padding: 10px 25px;
      border-radius: 25px;
      background-color: #d1c4e9;
      font-weight: bold;
      color: #4a148c;
      user-select: none;
      transition: background-color 0.3s ease;
      flex-shrink: 0;
    }
    .tab.active {
      background-color: #7b1fa2;
      color: white;
      box-shadow: 0 0 8px rgba(123,31,162,0.8);
    }
    .output {
      background: #fff;
      border: 2px solid #7b1fa2;
      border-radius: 10px;
      padding: 15px;
      white-space: pre-wrap;
      min-height: 150px;
      font-family: monospace;
      font-size: 14px;
      direction: ltr;
      overflow-x: auto;
      margin-top: 10px;
    }
    @media (max-width: 700px) {
      .flex-row {
        flex-direction: column;
      }
      button {
        width: 100%;
      }
      .tabs {
        justify-content: center;
      }
      .tab {
        width: 100%;
        text-align: center;
      }
    }

    #toast {
      position: fixed;
      bottom: 30px;
      right: 30px;
      background: #7b1fa2;
      color: white;
      padding: 15px 25px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(123,31,162,0.7);
      font-weight: 600;
      font-size: 16px;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.5s ease;
      z-index: 9999;
    }
    #toast.show {
      opacity: 1;
      pointer-events: auto;
    }
  </style>
</head>
<body>

  <h1>√œ«… ÷€ÿ Ê Õ·Ì· Ê Õ”Ì‰ √ﬂÊ«œ CSS «·„ ﬂ«„·…</h1>

  <div class="container">
    <div class="section-title">√œŒ· ﬂÊœ CSS</div>
    <textarea id="cssInput" placeholder="÷⁄ ﬂÊœ CSS Â‰«..."></textarea>

    <div class="section-title">ŒÌ«—«  «·÷€ÿ Ê«· Õ”Ì‰</div>
    <div class="flex-row">
      <label><input type="checkbox" id="removeComments" checked /> ≈“«·… «· ⁄·Ìﬁ« </label>
      <label><input type="checkbox" id="minify" /> ÷€ÿ „ﬂÀ›</label>
      <label><input type="checkbox" id="space" />  —ﬂ „”«›«  »⁄œ «·›Ê«’·</label>
      <label><input type="checkbox" id="removeLastSemicolon" /> ≈“«·… «·›«’·… «·√ŒÌ—… ;</label>
      <label><input type="checkbox" id="convertPxToRem" />  ÕÊÌ· px ≈·Ï rem</label>
      <label><input type="checkbox" id="checkDuplicates" /> ﬂ‘› Œ’«∆’ „ﬂ——…</label>
    </div>

    <div class="flex-row">
      <button onclick="processCSS()">÷€ÿ Ê Õ”Ì‰ CSS</button>
      <button onclick="clearCSS()">„”Õ «·ﬂÊœ</button>
      <button onclick="selectAllCSS()"> ÕœÌœ «·ﬂ·</button>
      <button onclick="copyCSS()">‰”Œ «·ﬂÊœ</button>
      <button onclick="downloadCSS('css')"> ‰“Ì· .css</button>
      <button onclick="downloadCSS('txt')"> ‰“Ì· .txt</button>
    </div>

    <div class="section-title">«·‰ ÌÃ…</div>
    <textarea id="cssOutput" readonly placeholder="” ŸÂ— «·‰ ÌÃ… Â‰«..."></textarea>
  </div>

  <div class="container">
    <div class="section-title">√œÊ«  ≈÷«›Ì…</div>

    <div class="tabs">
      <div class="tab active" data-tab="generate"> Ê·Ìœ CSS</div>
      <div class="tab" data-tab="compare">„ﬁ«—‰… CSS</div>
      <div class="tab" data-tab="performance"> Õ·Ì· «·√œ«¡</div>
    </div>

    <div id="generate" class="tab-content">
      <textarea id="generateInput" placeholder="√œŒ· «·Œ’«∆’ („À·«: background-color: red; font-size: 16px;)"></textarea>
      <button onclick="generateCSS()"> Ê·Ìœ CSS</button>
      <textarea id="generateOutput" readonly placeholder="”Ì „  Ê·Ìœ ﬂÊœ CSS Â‰«..."></textarea>
    </div>

    <div id="compare" class="tab-content" style="display:none;">
      <textarea id="compareInput1" placeholder="√œŒ· „·› CSS «·√Ê· Â‰«..."></textarea>
      <textarea id="compareInput2" placeholder="√œŒ· „·› CSS «·À«‰Ì Â‰«..."></textarea>
      <button onclick="compareCSS()">„ﬁ«—‰… «·„·›Ì‰</button>
      <textarea id="compareOutput"
readonly placeholder="‰ ÌÃ… «·„ﬁ«—‰… ” ŸÂ— Â‰«..."></textarea>
    </div>

    <div id="performance" class="tab-content" style="display:none;">
      <textarea id="performanceInput" placeholder="√œŒ· ﬂÊœ CSS · Õ·Ì· «·√œ«¡..."></textarea>
      <button onclick="analyzePerformance()"> Õ·Ì· «·√œ«¡</button>
      <textarea id="performanceOutput" readonly placeholder="‰ ÌÃ…  Õ·Ì· «·√œ«¡ ” ŸÂ— Â‰«..."></textarea>
    </div>
  </div>

  <div id="toast"></div>

  
  
  <!-- ﬁ”„ «·‘—Õ »«·⁄—»Ì… -->
<div class="container lang-block active" id="desc-ar">
  <div class="tool-container">
    <div class="tool-description">
      <h2>‘—Õ «” Œœ«„ √œ«…  Õ”Ì‰ CSS</h2>
      <p>
        1. ﬁ„ »·’ﬁ ﬂÊœ CSS ›Ì «·Õﬁ· «·„Œ’’ »«·√⁄·Ï.<br>
        2. «Œ — „‰ «·ŒÌ«—«  «·„ «Õ… „À·:<br>
        - ≈“«·… «· ⁄·Ìﬁ« <br>
        -  — Ì» «·Œ’«∆’ «·√»ÃœÌ…<br>
        - ≈“«·… «·Œ’«∆’ «·„ﬂ——…<br>
        - ≈“«·… «·„”«›«  Ê«·›Ê«’· «·“«∆œ…<br>
        -  ÕÊÌ· px ≈·Ï rem<br>
        3. «÷€ÿ ⁄·Ï “— " Õ”Ì‰ «·ﬂÊœ" ·„⁄«·Ã… «·ﬂÊœ Ê Õ”Ì‰Â.<br>
        4. Ì„ﬂ‰ﬂ „⁄«Ì‰… «·‰ ÌÃ… ›Ì ‰›” «·Õﬁ· √Ê ‰”ŒÂ« √Ê Õ›ŸÂ« ﬂ„·›.<br>
        5. ÌÊÃœ √Ì÷« √œÊ«  „”«⁄œ… „À·:  Ê·Ìœ CSS ñ „ﬁ«—‰… ñ  Õ·Ì· ñ  ÕÊÌ· ÊÕœ« .<br>
        6. Ì„ﬂ‰ﬂ «· »œÌ· ≈·Ï «·Ê«ÃÂ… «·≈‰Ã·Ì“Ì… »«” Œœ«„ «·√“—«— ›Ì «·√⁄·Ï.
      </p>
    </div>
  </div>
</div>



  
  
  
  
  
  
  <script>
    // «· »ÊÌ»«  (Tabs) -  »œÌ· «·„Õ ÊÏ
    const tabs = document.querySelectorAll('.tab');
    const tabContents = document.querySelectorAll('.tab-content');

    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        const target = tab.dataset.tab;
        tabContents.forEach(tc => {
          tc.style.display = (tc.id === target) ? 'block' : 'none';
        });
      });
    });

    // ≈ŸÂ«— —”«·… ⁄«∆„… (toast)
    function showToast(message) {
      const toast = document.getElementById('toast');
      toast.textContent = message;
      toast.classList.add('show');
      setTimeout(() => {
        toast.classList.remove('show');
      }, 3000);
    }

    // œ«·… „⁄«·Ã… Ê Õ”Ì‰ ÷€ÿ CSS
    function processCSS() {
      let css = document.getElementById('cssInput').value;

      if (!css.trim()) {
        showToast('«·—Ã«¡ ≈œŒ«· ﬂÊœ CSS √Ê·«!');
        return;
      }

      const removeComments = document.getElementById('removeComments').checked;
      const minify = document.getElementById('minify').checked;
      const space = document.getElementById('space').checked;
      const removeLastSemicolon = document.getElementById('removeLastSemicolon').checked;
      const convertPxToRem = document.getElementById('convertPxToRem').checked;
      const checkDuplicates = document.getElementById('checkDuplicates').checked;

      // ≈“«·… «· ⁄·Ìﬁ« 
      if (removeComments) {
        css = css.replace(/\/\*[\s\S]*?\*\//g, '');
      }

      //  ÕÊÌ· px ≈·Ï rem (⁄·Ï «› —«÷ 16px = 1rem)
      if (convertPxToRem) {
        css = css.replace(/(\d*\.?\d+)px/g, (match, p1) => {
          const remValue = (parseFloat(p1) / 16).toFixed(4).replace(/\.?0+$/, '');
          return remValue + 'rem';
        });
      }

      // ÷€ÿ CSS (≈“«·… „”«Õ«  “«∆œ… Ê√”ÿ— ÃœÌœ…)
      if (minify) {
        // ≈“«·… Ã„Ì⁄ «·√”ÿ— «·ÃœÌœ… Ê«· «» Ê«·„”«Õ«  «·“«∆œ…
        css = css.replace(/\s+/g, ' ');
        // ≈“«·… «·„”«›«  ﬁ»· Ê»⁄œ «·√ﬁÊ«” Ê«·›Ê«’· Ê«·‰ﬁÿ Ì‰
        css = css.replace(/\s*{\s*/g, '{').replace(/\s*}\s*/g, '}')
                 .replace(/\s*;\s*/g, ';').replace(/\s*:\s*/g, ':')
                 .replace(/\s*,\s*/g, ',');
      } else {
        // ›Ì Õ«·… ⁄œ„ «·÷€ÿ «·„ﬂÀ›° ›ﬁÿ ≈“«·… »⁄÷ «·„”«Õ«  «· ⁄”›Ì… «·“«∆œ…
        css = css.replace(/^\s+|\s+$/gm, '');
      }

      //  —ﬂ „”«›… »⁄œ «·›Ê«’·
      if (space) {
        css = css.replace(/,/g, ', ');
      }

      // ≈“«·… «·›«’·… «·√ŒÌ—… ›Ì ¬Œ— Œ«’Ì… (ﬁ»· «·ﬁÊ” «·„€·ﬁ)
      if (removeLastSemicolon) {
        css = css.replace(/;(?=\s*})/g, '');
      }

      // ﬂ‘› «·Œ’«∆’ «·„ﬂ——… œ«Œ· ﬂ· »·Êﬂ CSS
      if (checkDuplicates) {
        css = removeDuplicateProperties(css);
      }

      document.getElementById('cssOutput').value = css.trim();
      showToast(' „  „⁄«·Ã… «·ﬂÊœ »‰Ã«Õ!');
    }

    // œ«·… ≈“«·… «·Œ’«∆’ «·„ﬂ——… (œ«Œ· ﬂ· ﬁÊ” {})
    function removeDuplicateProperties(cssText) {
      return cssText.replace(/([^{]+){([^}]*)}/g, (match, selector, body) => {
        const props = body.split(';').map(p => p.trim()).filter(p => p.length > 0);
        const seen = new Set();
        const filteredProps = [];
        props.forEach(prop => {
          const propName = prop.split(':')[0].trim();
          if (!seen.has(propName)) {
            seen.add(propName);
            filteredProps.push(prop);
          }
        });
        return `${selector}{${filteredProps.join(';')}}`;
      });
    }

    // „”Õ «·ÕﬁÊ·
    function clearCSS() {
      document.getElementById('cssInput').value = '';
      document.getElementById('cssOutput').value = '';
      showToast(' „ „”Õ «·ÕﬁÊ·');
    }

    //  ÕœÌœ «·ﬂ· ›Ì „—»⁄ «·≈Œ—«Ã
    function selectAllCSS() {
      const output = document.getElementById('cssOutput');
      output.select();
      output.setSelectionRange(0, output.value.length);
      showToast(' „  ÕœÌœ ﬂ· «·ﬂÊœ');
    }

    // ‰”Œ «·ﬂÊœ „‰ „—»⁄ «·≈Œ—«Ã
    function copyCSS() {
      const output = document.getElementById('cssOutput');
      if (!output.value.trim()) {
        showToast('·« ÌÊÃœ ﬂÊœ ·Ì „ ‰”ŒÂ');
        return;
      }
      output.select();
      output.setSelectionRange(0, output.value.length);
      navigator.clipboard.writeText(output.value).then(() => {
        showToast(' „ ‰”Œ «·ﬂÊœ ≈·Ï «·Õ«›Ÿ…');
      }, () => {
        showToast('ÕœÀ Œÿ√ √À‰«¡ «·‰”Œ');
      });
    }

    //  ‰“Ì· «·ﬂÊœ »’Ì€… css √Ê txt
    function downloadCSS(ext) {
      const css = document.getElementById('cssOutput').value.trim();
      if (!css) {
        showToast('·« ÌÊÃœ ﬂÊœ ·Ì „  ‰“Ì·Â');
        return;
      }
      const blob = new Blob([css], { type: 'text/plain' });
      const a = document.createElement('a');
      a.href = URL.createObjectURL(blob);
      a.download = `compressed_css.${ext}`;
      a.click();
      URL.revokeObjectURL(a.href);
      showToast(` „  ‰“Ì· «·„·› »’Ì€… .${ext}`);
    }

    //  Ê·Ìœ ﬂÊœ CSS „‰ «·Œ’«∆’ «·„œŒ·… (Tab  Ê·Ìœ CSS)
    function generateCSS() {
      const input = document.getElementById('generateInput').value.trim();
      if (!input) {
        showToast('«·—Ã«¡ ≈œŒ«· «·Œ’«∆’ · Ê·Ìœ CSS');
        return;
      }
      // ≈÷«›… ﬁÊ”Ì‰ „Œ’’Ì‰ ·≈ŸÂ«— «·‰ ÌÃ… Ê«÷Õ…
      const cssCode = `selector {\n  ${input.replace(/;?\s*$/,';')}\n}`;
      document.getElementById('generateOutput').value = cssCode;
      showToast(' „  Ê·Ìœ ﬂÊœ CSS');
    }

    // „ﬁ«—‰… „·›Ì CSS (Tab „ﬁ«—‰… CSS)
    function compareCSS() {
      const css1 = document.getElementById('compareInput1').value.trim();
      const css2 = document.getElementById('compareInput2').value.trim();

      if (!css1 || !css2) {
        showToast('«·—Ã«¡ ≈œŒ«· ﬂ·« «·„·›Ì‰ ··„ﬁ«—‰…');
        return;
      }

      const lines1 = css1.split('\n').map(l => l.trim()).filter(l => l);
      const lines2 = new Set(css2.split('\n').map(l => l.trim()).filter(l => l));

      // ≈ÌÃ«œ «·›—Êﬁ - «·”ÿÊ— «·„ÊÃÊœ… ›Ì «·√Ê· Ê€Ì— „ÊÃÊœ… ›Ì «·À«‰Ì
      const diff = lines1.filter(line => !lines2.has(line));

      document.getElementById('compareOutput').value = diff.length
        ? diff.join('\n')
        : '·«  ÊÃœ «Œ ·«›«  »Ì‰ «·„·›Ì‰';
      showToast(' „  „ﬁ«—‰… «·„·›« ');
    }

    //  Õ·Ì· √œ«¡ «·ﬂÊœ (Tab  Õ·Ì· «·√œ«¡)
    function analyzePerformance() {
      const css = document.getElementById('performanceInput').value.trim();
      if (!css) {
        showToast('«·—Ã«¡ ≈œŒ«· ﬂÊœ CSS · Õ·Ì· «·√œ«¡');
        return;
      }

      // Õ”«» ÿÊ· «·ﬂÊœ (ﬂ„À«· »”Ìÿ)
      const length = css.length;

      // Õ”«» ⁄œœ «· ⁄·Ìﬁ« 
      const comments = (css.match(/\/\*[\s\S]*?\*\//g) || []).length;

      // Õ”«» ⁄œœ ﬁÊ«⁄œ CSS (⁄œœ «·√ﬁÊ«” {})
      const rulesCount = (css.match(/{/g) || []).length;

      // Õ”«» „ Ê”ÿ ÿÊ· «·ﬁ«⁄œ…
      const avgRuleLength = rulesCount ? Math.round(length / rulesCount) : 0;

      const result = `
⁄œœ «·√Õ—›: ${length}
⁄œœ «· ⁄·Ìﬁ« : ${comments}
⁄œœ ﬁÊ«⁄œ CSS: ${rulesCount}
„ Ê”ÿ ÿÊ· «·ﬁ«⁄œ… «·Ê«Õœ…: ${avgRuleLength} Õ—›
      `.trim();

      document.getElementById('performanceOutput').value = result;
      showToast(' „  Õ·Ì· «·√œ«¡');
    }
  </script>

</body>
